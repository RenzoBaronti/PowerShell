# Load Dell Redfish modules
# Import the necessary Redfish PowerShell modules to interact with iDRAC
Import-Module "Invoke-CreateVirtualDiskREDFISH.psm1"
Import-Module "Invoke-AssignUnassignHotspareREDFISH.psm1"

# iDRAC login details
# Define the login credentials for accessing the iDRAC interface
$idrac_ip = "192.168.1.100"   # IP address of the iDRAC server
$idrac_username = "root"      # Username for iDRAC
$idrac_password = "calvin"    # Password for iDRAC

# Create credential object
# Securely create a credential object using the provided username and password
$cred = New-Object System.Management.Automation.PSCredential (
    $idrac_username, (ConvertTo-SecureString $idrac_password -AsPlainText -Force)
)

# Get controller list
# Construct the URL to retrieve storage controllers from the iDRAC API
$controllerListUrl = "https://$idrac_ip/redfish/v1/Systems/System.Embedded.1/Storage"
# Send request to iDRAC to get the list of controllers
$controllersResp = Invoke-RestMethod -Uri $controllerListUrl -Credential $cred -UseBasicParsing -SkipCertificateCheck
# Parse the response to get the list of controllers
$controllers = $controllersResp.Members

# Loop through each controller and process its drives
foreach ($controllerUriObj in $controllers) {
    $controllerUri = $controllerUriObj.'@odata.id'  # Get the URI of the controller
    $controllerId = $controllerUri -split "/" | Select-Object -Last 1  # Extract the controller ID
    $driveListUrl = "https://$idrac_ip/redfish/v1/Systems/System.Embedded.1/Storage/$controllerId/Drives"  # URL for the controller's drives
    
    Write-Host "`nChecking controller: $controllerId"  # Log the current controller being processed

    try {
        # Get the list of drives for the current controller
        $driveListResp = Invoke-RestMethod -Uri $driveListUrl -Credential $cred -UseBasicParsing -SkipCertificateCheck
        $driveRefs = $driveListResp.Members  # List of drives in the controller
        $usableDrives = @()  # Initialize an empty array to store usable drives

        # Loop through each drive and check if it is enabled and unconfigured
        foreach ($driveRef in $driveRefs) {
            $diskUri = "https://$idrac_ip" + $driveRef.'@odata.id'  # Get the URI for each drive
            $disk = Invoke-RestMethod -Uri $diskUri -Credential $cred -UseBasicParsing -SkipCertificateCheck  # Get detailed drive info

            # If the drive is enabled and unconfigured, add it to the usable drives list
            if ($disk.Status.State -eq "Enabled" -and $disk.Identifiers.DurableName -match "Unconfigured") {
                $usableDrives += $disk.Id
            }
        }

        $driveCount = $usableDrives.Count  # Count the number of usable drives
        Write-Host "Found $driveCount usable drive(s): $($usableDrives -join ', ')"  # Log usable drives

        # Logic to create RAID based on the number of usable drives
        if ($driveCount -eq 2) {
            # If exactly 2 drives are found, create a RAID 1 array
            Write-Host "Creating RAID 1..."
            Invoke-CreateVirtualDiskREDFISH `
                -idrac_ip $idrac_ip `
                -idrac_username $idrac_username `
                -idrac_password $idrac_password `
                -create_virtual_disk $controllerId `
                -raid_level "1" `
                -pdisks ($usableDrives -join ",") `
                -name "RAID1_VD"

        } elseif ($driveCount -ge 4) {
            # If there are 4 or more drives, create a RAID 10 array
            $usableRAIDDisks = if ($driveCount % 2 -eq 0) {
                $driveCount  # If the drive count is even, use all drives
            } else {
                $driveCount - 1  # If odd, use one less to make it even
            }

            # Select disks for the RAID array (RAID 10 needs an even number of disks)
            $raidDisks = $usableDrives[0..($usableRAIDDisks - 1)]
            # Identify any remaining disks to be used as hot spares
            $spares = if ($usableRAIDDisks -lt $driveCount) {
                $usableDrives[$usableRAIDDisks..($driveCount - 1)]
            } else {
                @()  # No spare disks if all drives are used in the RAID array
            }

            # Create the RAID 10 virtual disk
            Write-Host "Creating RAID 10 with $($raidDisks.Count) disks..."
            Invoke-CreateVirtualDiskREDFISH `
                -idrac_ip $idrac_ip `
                -idrac_username $idrac_username `
                -idrac_password $idrac_password `
                -create_virtual_disk $controllerId `
                -raid_level "10" `
                -pdisks ($raidDisks -join ",") `
                -name "RAID10_VD"

            # Assign any spare drives as global hot spares
            foreach ($spare in $spares) {
                Write-Host "Assigning $spare as global hot spare..."
                Invoke-AssignUnassignHotspareREDFISH `
                    -idrac_ip $idrac_ip `
                    -idrac_username $idrac_username `
                    -idrac_password $idrac_password `
                    -controller_fqdd $controllerId `
                    -physical_disk_fqdd $spare `
                    -assign_unassign "Assign" `
                    -hotspare_type "Global"
            }

        } else {
            # If there are not enough drives to create RAID, log a message
            Write-Host "Not enough drives for RAID. Skipping controller: $controllerId"
        }

    } catch {
        # Catch any errors that occur during the processing of a controller and log the error
        Write-Host "Error processing controller $controllerId : $_"
    }
}
